# Generated by Django 2.0.7 on 2018-07-30 11:35

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('events', '0026_auto_20180729_1422'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategoryNode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', models.CharField(max_length=255, unique=True)),
                ('depth', models.PositiveIntegerField()),
                ('numchild', models.PositiveIntegerField(default=0)),
                ('name', models.CharField(max_length=72)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from='name')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventLike',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source', models.CharField(choices=[('USER', 'User'), ('UNLIKED', 'Unliked'), ('RECOMMENDATION', 'Recommendation')], max_length=16)),
                ('initial_source', models.CharField(choices=[('USER', 'User'), ('UNLIKED', 'Unliked'), ('RECOMMENDATION', 'Recommendation')], max_length=16)),
                ('source_location', models.CharField(choices=[('LISTINGS', 'Listings'), ('COLLECTION', 'Collection'), ('MATCHER', 'Matcher')], max_length=16)),
            ],
        ),
        migrations.RenameField(
            model_name='event',
            old_name='just_for_pgs',
            new_name='audience_just_for_pgs',
        ),
        migrations.RenameField(
            model_name='event',
            old_name='suitable_kids_families',
            new_name='audience_suitable_kids_families',
        ),
        migrations.AddField(
            model_name='event',
            name='audience_good_to_meet_people',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='event',
            name='canceled_at',
            field=models.DateTimeField(blank=True, null=True, default=None),
        ),
        migrations.AddField(
            model_name='venue',
            name='entry_information',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='venue',
            name='ephemeral',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='venue',
            name='venue_type',
            field=models.CharField(choices=[('CLUB', 'Nightclub'), ('BAR', 'Bar'), ('NA', 'Uncategorised')], default='NA', max_length=8),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name='event',
            name='category',
        ),
        migrations.AddField(
            model_name='eventlike',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Event'),
        ),
        migrations.AddField(
            model_name='eventlike',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='likes',
            field=models.ManyToManyField(through='events.EventLike', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='event',
            name='category',
            field=models.ManyToManyField(to='events.CategoryNode'),
        ),
        migrations.AlterUniqueTogether(
            name='eventlike',
            unique_together={('event', 'user')},
        ),
    ]
